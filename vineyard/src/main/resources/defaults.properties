# ==============================================================================
# JFC / Swing configuration
# ==============================================================================

JTree.lineStyle = Angled
sun.swing.enableImprovedDragGesture = true
swing.aatext = true
swing.boldMetal = false
swing.defaultlaf = com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel
swing.useSystemFontSettings = false




# ==============================================================================
# System Properties for Java 2D Technology
# (http://download.oracle.com/javase/6/docs/technotes/guides/2d/flags.html)
# ==============================================================================

# Enable/disable the OpenGL-based pipeline, which provides hardware
# acceleration.
# To silently enable the OpenGL-based pipeline, set this property to 'true'
# To receive verbose console output about whether the OpenGL-based pipeline is
# initialized successfully for a particular screen, set this property to 'True'
#(note the uppercase T):
# Default value: false
sun.java2d.opengl = true

# If your application is experiencing less-than-desirable performance, the trace
# runtime flag can help you determine the source of the problem.
# The flag is specified with a list of options.
# The options are:
#   * log: print out the name of each primitive as it is executed
#   * timestamp:  precede each log entry with the currentTimeMillis()
#   * count: at exit, print out a count of each primitive used
#   * out:<filename>: send output (logging and counts) to the indicated file
#   * help: print out a short usage statement
#   * verbose: print out a summary of the options chosen for this run
#sun.java2d.trace = log,timestamp,count,verbose

# How to use: Set on the command line or in a webstart jnlp file as one of the
# specified values below to control rendering hints used by Swing text.
# Strictly this flag doesn't control Java 2D but is documented here because the
# values all directly map to Java 2D text antialiasing rendering hints values.
# What the flag really does is override what the JRE reads from the user's
# desktop settings as the user's desktop antialiased text preferences. Swing
# instructs Java 2D to render Swing text to match that preference, so by
# overriding it you can control Swing text. This applies to standard Swing
# components (like JTextArea, JButton) in the Metal L&F (aka Java L&F) and
# native (Windows, GTK) Swing L&Fs. It should also apply to any custom component
# or L&F which picks up the same property.
#
# System Property Value   | java.awt.RenderingHint value
# ------------------------+-----------------------------------------------------
# "off"|"false"|"default" : VALUE_TEXT_ANTIALIAS_DEFAULT
# "on"                    : VALUE_TEXT_ANTIALIAS_ON
# "gasp"                  : VALUE_TEXT_ANTIALIAS_GASP
# "lcd"|"lcd_hrgb"        : VALUE_TEXT_ANTIALIAS_LCD_HRGB
# "lcd_hbgr"              : VALUE_TEXT_ANTIALIAS_LCD_HBGR
# "lcd_vrgb"              : VALUE_TEXT_ANTIALIAS_LCD_VRGB
# "lcd_vbgr"              : VALUE_TEXT_ANTIALIAS_LCD_VBGR
#
# Default value: true
awt.useSystemAAFontSettings = true




# ==============================================================================
# Mac OS X: Integration with the Native Application Environment
# ==============================================================================

# When using the Aqua look and feel, this property puts Swing menus in the
# Mac OS X menu bar. Note that JMenuBars in JDialogs are not moved to the
# Mac OS X menu bar.
# The default value is false.
apple.laf.useScreenMenuBar = true

# Allows you to display your main windows with the unified Aqua window
# appearance. This property should be applied only to the primary application
# window, and should not affect supporting windows like dialogs or preference
# windows.
# The default value is false.
apple.awt.brushMetalLook = false

# By default, the AWT File Dialog lets you choose a file. Under certain
# circumstances, however, it may be proper for you to choose a directory
# instead. If that is the case, set this property to allow for directory
# selection in a file dialog.
# The default value is false.
apple.awt.fileDialogForDirectories = false

# Supppresses the normal application Dock icon and menu bar from appearing.
# Only appropriate for background applications which show a tray icon or other
# alternate user interface for accessing the apps windows. Unlike
# java.awt.headless=true, this does not suppress windows and dialogs from
# actually appearing on screen.
# The default value is false.
apple.awt.UIElement = false


# ==============================================================================
# Mac OS X: Full-Screen Java
# ==============================================================================

# Causes full-screen applications to be displayed in a window.
# You might want to use this property during development of full-screen
# Java applications. This is strictly a developer option.
# The default value is false.
apple.awt.fakefullscreen = false

# When you have multiple displays, entering full-screen mode normally darkens
# the secondary screens. Setting this property to false overrides the default
# behavior and secondary screens are not darkened. You might want to override
# the default behavior for development purposes like debugging.
# This is strictly a developer option.
# The default value is true.
apple.awt.fullscreencapturealldisplays = true

# Hides the mouse cursor when in full-screen mode.
# The default value is true.
apple.awt.fullscreenhidecursor = true

# If you change the screen resolution when entering full-screen mode, the screen
# transitions by fading out of the old resolution and back in with the new
# resolution. If you do not change screen resolution, you normally do not see
# this fade effect. This property enables that fade effect regardless of whether
# you have changed the screen resolution.
# The default value is false.
apple.awt.fullscreenusefade = true




# ==============================================================================
# Mac OS X: Quartz Rendering Hints
# ==============================================================================

# Causes graphic primitives such as line, arc, rectangle, and so on, to be
# painted with antialiasing. Even with this property set to on from the command
# line, you may still set the KEY_ANTIALISING rendering hint for specific
# objects.
# This option accepts either on or off for its value. This property is
# automatically set to on when you use the Aqua look and feel. This makes the
# behavior more consistent with the native Mac OS X user interface. Note that
# even if you set this to off for an application that uses the Aqua look and
# feel, Aqua user interface elements themselves are still drawn with
# antialiasing.
apple.awt.antialiasing = on

# Causes text to be drawn with antialiasing. Sets the KEY_TEXT_ANTIALIASING
# rendering hint. Although this property inherits the same setting as
# apple.awt.antialiasing, you can override that setting explicitly.
# This option accepts either on or off for its value. The default value is off
# unless you are using the Aqua look and feel.
apple.awt.textantialiasing = on

# Determines whether Graphics2D objects prioritize speed or quality.
# This option accepts either speed or quality for its value. It sets the
# KEY_RENDERING hint so that it accepts either VALUE_RENDER_SPEED or
# VALUE_RENDER_QUALITY as an argument.
apple.awt.rendering = quality

# Determines which algorithm is used in image transformations, by setting the
# KEY_INTERPOLATION rendering hint. This option accepts either
# nearestneighbor, bilinear, or bicubic for its value. Setting this option
# passes VALUE_INTERPOLATION_NEAREST_NEIGHBOR, VALUE_INTERPOLATION_BILINEAR, or
# VALUE_INTERPOLATION_BICUBIC, respectively, to KEY_INTERPOLATION.
apple.awt.interpolation = bicubic


# Sets metrics to use floating-point values instead of using (the default)
# integer values, by setting the KEY_FRACTIONALMETRICS rendering hint.
# Options include on and off, corresponding to VALUE_FRACTIONALMETRICS_ON and
# VALUE_FRACTIONALMETRICS_OFF, respectively.
apple.awt.fractionalmetrics = off




# ==============================================================================
# Mac OS X: Quartz Graphics Drawing Performance
# ==============================================================================


# Determines whether graphics primitives are used in place of the relatively
# more complex shape objects if there is an appropriate mapping. For example, a
# call to draw a simple shape like draw(new Rectangle2D.Float(0, 0, 10, 10) is
# mapped to drawRect(0, 0, 10, 10). If you do not want this automatic
# optimization, set this value to false.
# The default value is true.
apple.awt.graphics.OptimizeShapes = true

# Determines whether graphics primitives are queued before being sent to the
# renderer. Doing so keeps the renderer primed and improves the graphics
# performance for rendering simple primitives like lines, rectangles, arcs, and
# ovals. This is referred to as lazy drawing. You may disable lazy drawing by
# setting this value to false.
# The default value is true.
apple.awt.graphics.EnableLazyDrawing = true

# If lazy drawing optimization is enabled, this option sets the size of the
# queue used. This property takes an integer value which represents the number
# of graphics primitives cached. Each graphics primitive requires about
# 10 entries. Each entry requires 4 bytes (1 entry = 4 bytes).
# The default value is 2.
apple.awt.graphics.EnableLazyDrawingQueueSize = 2


# Determines whether hardware acceleration is used to speed up rendering of
# simple primitives like images, lines, rects, and simple characters. In
# addition to using this flag, you need to enable Quartz 2D acceleration in the
# Quartz Debug application, included with the Xcode Developer Tools for
# Mac OS X.
# This is strictly a developer option. Java applications intended for use on
# Mac OS X should not rely on the presence of Quartz 2D acceleration.
# The default value is false.
apple.awt.graphics.EnableQ2DX = false

# Determines whether drawing updates are deferred. Deferred updates eliminate
# visual tearing, but block those applications that flush too often. Deferred
# drawing updates are not supported for Java applications. If you want to enable
# deferred drawing throughout your application, use this system property.
# This is strictly a developer option. Java applications intended for use on
# Mac OS X should not rely on deferred drawing updates.
# The default value is false.
apple.awt.graphics.EnableDeferredUpdates = false

# Determines whether Apple\u2019s Quartz renderer is used instead of Sun\u2019s 2D
# renderer.
# The default value is true for J2SE 5.0 and false for Java SE 6.
apple.awt.graphics.UseQuartz = false




# ==============================================================================
# Mac OS X: Pixel Conversion Performance
# ==============================================================================

# Determines whether pixel conversion is optimized for image formats that are
# not natively supported by the underlying operating system. Image formats that
# are not supported natively by Core Graphics include:
#   * TYPE_3BYTE_BGR
#   * TYPE_4BYTE_ABGR
#   * TYPE_4BYTE_ABGR_PRE
#   * TYPE_BYTE_BINARY
#   * TYPE_BYTE_INDEXED
#   * TYPE_CUSTOM
#   * TYPE_INT_ARGB
#   * TYPE_INT_BGR
#   * TYPE_USHORT_565_RGB
#   * TYPE_USHORT_GRAY
# You may override the default behavior by setting this property to false.
# The default value is true.
apple.awt.graphics.EnableLazyPixelConversion = true